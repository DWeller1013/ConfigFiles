#define DEFINE_FUNC_ATTRIBUTES
#include "nvim/func_attr.h"
#undef DEFINE_FUNC_ATTRIBUTES
static void set_init_default_shell(void);
static void set_init_default_backupskip(void);
static void set_init_default_cdpath(void);
static void set_init_expand_env(void);
static void set_init_fenc_default(void);
static void alloc_options_default(void);
static void change_option_default(const OptIndex opt_idx, OptVal value);
static void set_option_default(const OptIndex opt_idx, int opt_flags);
static void set_options_default(int opt_flags);
static void set_string_default(OptIndex opt_idx, char *val, _Bool allocated) FUNC_ATTR_NONNULL_ALL;
static const char *find_dup_item(const char *origval, const char *newval, const size_t newvallen, uint32_t flags) FUNC_ATTR_NONNULL_ARG(2);
static char *stropt_copy_value(const char *origval, char **argp, set_op_T op, uint32_t flags FUNC_ATTR_UNUSED);
static char *stropt_expand_envvar(OptIndex opt_idx, const char *origval, char *newval, set_op_T op);
static void stropt_concat_with_comma(const char *origval, char *newval, set_op_T op, uint32_t flags);
static void stropt_remove_val(const char *origval, char *newval, uint32_t flags, const char *strval, int len);
static void stropt_remove_dupflags(char *newval, uint32_t flags);
static char *stropt_get_newval(int nextchar, OptIndex opt_idx, char **argp, void *varp, const char *origval, set_op_T *op_arg, uint32_t flags);
static set_op_T get_op(const char *arg);
static set_prefix_T get_option_prefix(char **argp);
static int validate_opt_idx(win_T *win, OptIndex opt_idx, int opt_flags, uint32_t flags, set_prefix_T prefix, const char **errmsg);
static const char *find_tty_option_end(const char *arg);
static OptVal get_option_newval(OptIndex opt_idx, int opt_flags, set_prefix_T prefix, char **argp, int nextchar, set_op_T op, uint32_t flags, void *varp, char *errbuf, const size_t errbuflen, const char **errmsg) FUNC_ATTR_WARN_UNUSED_RESULT;
static void do_one_set_option(int opt_flags, char **argp, _Bool *did_show, char *errbuf, size_t errbuflen, const char **errmsg);
static int find_key_len(const char *arg_arg, size_t len, _Bool has_lt);
static char *option_expand(OptIndex opt_idx, const char *val);
static void didset_options(void);
static void didset_options2(void);
static void apply_optionset_autocmd(OptIndex opt_idx, int opt_flags, OptVal oldval, OptVal oldval_g, OptVal oldval_l, OptVal newval, const char *errmsg);
static const char *did_set_arabic(optset_T *args);
static const char *did_set_autochdir(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_binary(optset_T *args);
static const char *did_set_buflisted(optset_T *args);
static const char *did_set_cmdheight(optset_T *args);
static const char *did_set_diff(optset_T *args);
static const char *did_set_eof_eol_fixeol_bomb(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_equalalways(optset_T *args);
static const char *did_set_foldlevel(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_foldminlines(optset_T *args);
static const char *did_set_foldnestmax(optset_T *args);
static const char *did_set_helpheight(optset_T *args);
static const char *did_set_hlsearch(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_ignorecase(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_iminsert(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_langnoremap(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_langremap(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_laststatus(optset_T *args);
static const char *did_set_lines_or_columns(optset_T *args);
static const char *did_set_lisp(optset_T *args);
static const char *did_set_modifiable(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_modified(optset_T *args);
static const char *did_set_number_relativenumber(optset_T *args);
static const char *did_set_numberwidth(optset_T *args);
static const char *did_set_paste(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_previewwindow(optset_T *args);
static const char *did_set_pumblend(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_readonly(optset_T *args);
static const char *did_set_scrollback(optset_T *args);
static const char *did_set_scrollbind(optset_T *args);
static const char *did_set_shiftwidth_tabstop(optset_T *args);
static const char *did_set_showtabline(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_smoothscroll(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_spell(optset_T *args);
static const char *did_set_swapfile(optset_T *args);
static const char *did_set_textwidth(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_title_icon(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_titlelen(optset_T *args);
static const char *did_set_undofile(optset_T *args);
static const char *did_set_undolevels(optset_T *args);
static const char *did_set_updatecount(optset_T *args);
static const char *did_set_wildchar(optset_T *args);
static const char *did_set_winblend(optset_T *args);
static const char *did_set_window(optset_T *args FUNC_ATTR_UNUSED);
static const char *did_set_winheight(optset_T *args);
static const char *did_set_winwidth(optset_T *args);
static const char *did_set_wrap(optset_T *args);
static const char *did_set_xhistory(optset_T *args);
static void do_syntax_autocmd(buf_T *buf, _Bool value_changed);
static void do_spelllang_source(win_T *win);
static const char *check_num_option_bounds(OptIndex opt_idx, OptInt *newval, char *errbuf, size_t errbuflen) FUNC_ATTR_NONNULL_ARG(3);
static const char *validate_num_option(OptIndex opt_idx, OptInt *newval, char *errbuf, size_t errbuflen);
static OptValType option_get_type(const OptIndex opt_idx);
static void set_option_varp(OptIndex opt_idx, void *varp, OptVal value, _Bool free_oldval) FUNC_ATTR_NONNULL_ARG(2);
static char *optval_to_cstr(OptVal o);
static inline _Bool option_is_global_local(OptIndex opt_idx);
static inline _Bool option_is_global_only(OptIndex opt_idx);
static inline _Bool option_is_window_local(OptIndex opt_idx);
static OptVal get_option_unset_value(OptIndex opt_idx);
static _Bool is_option_local_value_unset(OptIndex opt_idx);
static const char *did_set_option(OptIndex opt_idx, void *varp, OptVal old_value, OptVal new_value, int opt_flags, scid_T set_sid, const _Bool direct, const _Bool value_replaced, char *errbuf, size_t errbuflen);
static const char *validate_option_value(const OptIndex opt_idx, OptVal *newval, int opt_flags, char *errbuf, size_t errbuflen);
static const char *set_option(const OptIndex opt_idx, OptVal value, int opt_flags, scid_T set_sid, const _Bool direct, const _Bool value_replaced, char *errbuf, size_t errbuflen);
static inline const char *unset_option_local_value(const OptIndex opt_idx);
static _Bool switch_option_context(void *const ctx, OptScope scope, void *const from, Error *err);
static void restore_option_context(void *const ctx, OptScope scope);
static void showoptions(_Bool all, int opt_flags);
static int optval_default(OptIndex opt_idx, void *varp);
static void showoneopt(vimoption_T *opt, int opt_flags);
static int put_set(FILE *fd, char *cmd, OptIndex opt_idx, void *varp);
static inline OptIndex get_opt_idx(vimoption_T *opt) FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE;
static inline void *get_varp(vimoption_T *p);
static char *copy_option_val(const char *val);
static void check_winopt(winopt_T *wop);
static _Bool match_str(char *const str, regmatch_T *const regmatch, char **const matches, const int idx, const _Bool test_only, const _Bool fuzzy, const char *const fuzzystr, fuzmatch_str_T *const fuzmatch);
static char *escape_option_str_cmdline(char *var);
static void option_value2string(vimoption_T *opt, int opt_flags);
static int wc_use_keyname(const void *varp, OptInt *wcp);
static void didset_options_sctx(int opt_flags, int *buf);
static Dict vimoption2dict(vimoption_T *opt, int opt_flags, buf_T *buf, win_T *win, Arena *arena);
#define DEFINE_EMPTY_ATTRIBUTES
#include "nvim/func_attr.h"  // IWYU pragma: export

